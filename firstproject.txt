first project

1) สร้าง repository ใน github.com
2) ทำการ git clone มาที่ folder
3) ใช้คำสั่ง npm init เพื่อสร้าง package.json
4) ใส่ dependencies ใน package.json

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node app"
  },
  
"dependencies": {
    
"express":"*",
    
"mongoose":"*",
    
"bcryptjs":"*",
    
"cors":"*",
    
"jsonwebtoken":"*",
    
"body-parser":"*",
    
"passport":"*",
    
"passport-jwt":"*"
  },

5) ใช้คำสั่ง npm install เพื่อ install package
6) เขียน app.js เพื่อให้เป็นตัวแรกในการ start
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');
const passport = require('passport');
const mongoose = require('mongoose');

const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Invalid Endpoint');
});

app.listen(port, () => {
  console.log("Server started on port " + port);
});

7) ใช้คำสั่ง npm start ในการ start service

8) ถ้าจะให้ service run ตลอด ใช้คำสั่ง npm install -g nodemon 
เพื่อลงตัว nodemon 

9) ใช้คำสั่ง nodemon ในการ start service

10) สร้าง folder router โดยทำการสร้าง ไฟล์ที่จะ route ไป เช่น register, authenticate, profile, validate เป็นต้น

11) สร้าง static folder เพื่อ share ระหว่างหน้าบ้านกับหลังบ้าน ใช้เป็น folder public แล้วเอาไฟล์เช่น index.html ไปไว้ในนั้นเพื่อให้เป็นจุดเริ่มของหน้าบ้าน

12) ทำการ connect ไปที่ database โดยสร้าง folder config เพื่อให้เก็บข้อมูลการ connect ไป

13) ทำการ เช็คเรื่องการ connect ได้กับไม่ได้
mongoose.connection.on('connected', () => {
  console.log('Connected to database '+config.database);
});

mongoose.connection.on('error', (err) => {
  console.log('Database error '+err);
});

14) สร้าง model สำหรับเพื่อเป็น object ส่งหากัน กำหนด schema
const UserSchema = mongoose.Schema({
  name: {
    type: String
  },
  email: {
    type: String,
    required: true
  },
  username: {
    type: String,
    required: true
  },
  password: {
    type: String,
    required: true
  }
});

แล้วทำ function ที่ต้องการ
const User = module.exports = mongoose.model('User', UserSchema);

module.exports.getUserById = function(id, callback) {
  User.findById(id, callback);
}

module.exports.getUserByUsername = function(username, callback) {
  const query = {username: username};
  User.findOne(query, callback);
}

15) สร้าง function การ post
router.post('/register', (req, res, next) => {
  //res.send('REGISTER');
  let newUser = new User({
    name: req.body.name,
    email: req.body.email,
    username: req.body.username,
    password: req.body.password
  });

  User.addUser(newUser, (err, user) => {
    if(err) {
      res.json({success: false, msg: 'failed to register user'});
    } else {
      res.json({success: true, msg: 'User registered'});
    }
  });
});

16) เพิ่ม function ไปไว้ใน model
module.exports.addUser = function(newUser, callback) {
  bcrypt.genSalt(10, function(err, salt) {
    bcrypt.hash(newUser.password, salt, (err, hash) => {
      if(err) {
        throw err;
      }
      newUser.password = hash;
      newUser.save(callback);
    });
  });
}


17) mongodb service
start service
mongod --dbpath D:\MongoDB\Server\3.4\bin\data

show dbs
show collections
db.users.find().pretty()

18) ถ้ามีการเพิ่ม function ใน หน้าหลักของ js จะต้องมีการเอาไปใส่ ใน model ด้วย
เช่น เรียกใช้
User.comparePassword(password, user.password, (err, isMatch) => {
}

ต้องไปเขียน ใน model ด้วย
module.exports.comparePassword = function(candidatePassword, hash, callback) {
  bcrypt.compare(candidatePassword, hash, (err, isMatch) => {
    if(err) throw err;
    callback(null, isMatch);
  });
}

19) เรื่อง token จะต้องมีการเก็บข้อมุลไว้ใน passport.js
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;
const User = require('../model/user');
const config = require('../config/database');

module.exports = function(passport) {
  let opts = {};
  opts.jwtFromRequest = ExtractJwt.fromAuthHeader();
  opts.secretOrKey = config.secret;
  passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
    console.log(jwt_payload);
    User.getUserById(jwt_payload._doc._id, (err, user) => {
      if(err) {
        return done(err, false);
      }

      if(user) {
        return done(null, user);
      } else {
        return done(null, false);
      }
    });
  }));
}

และเรียกใช้ในแต่ละหน้า ที่ต้องการตรวจสอบ token
router.get('/profile', passport.authenticate('jwt', {session:false}), (req, res, next) => {
  //res.send('PROFILE');
  res.json({user: req.user});
});





